/**
 * chatbot.js - Gestion du chatbot interactif
 * 
 * Ce fichier g√®re le fonctionnement du chatbot qui simule une conversation
 * avec Joris Salmon et r√©pond aux questions des visiteurs.
 */

// Initialiser un tableau pour stocker les messages
let conversationHistory = [];

// Ouvrir/Fermer la fen√™tre de chat
document.getElementById("chatbotBubble").addEventListener("click", function() {
    const popup = document.getElementById("chatPopup");
    popup.style.display = popup.style.display === "block" ? "none" : "block";

    if (popup.style.display === "block") {
        this.style.animation = "none"; // Arr√™te l'animation
        showPresetPhrases();
    } else {
        this.style.animation = ""; // R√©active l'animation si la bulle est ferm√©e
    }
});

// √âcouter l'√©v√©nement "keypress" sur le champ de texte
document.getElementById("userMessage").addEventListener("keypress", function(event) {
    if (event.key === "Enter") {
        event.preventDefault(); // Emp√™cher le comportement par d√©faut
        sendMessage(); // Appeler la fonction d'envoi de message
    }
});

// Phrases pr√©fabriqu√©es pour suggestion
const presetPhrases = [
    "Bonjour, qui es-tu ?",
    "Quelles sont tes comp√©tences ?",
    "Comment te contacter ?",
    "Ton CV, Github, ou LinkedIn ?"
];

// Fonction pour afficher les phrases pr√©fabriqu√©es
function showPresetPhrases() {
    const presetContainer = document.createElement('div');
    presetContainer.classList.add('preset-phrases');
    
    // Vider le conteneur avant de le remplir
    presetContainer.innerHTML = '';

    presetPhrases.forEach(phrase => {
        const button = document.createElement('button');
        button.innerText = phrase;
        button.onclick = (event) => {
            event.stopPropagation(); // Emp√™che la fermeture du chat
            sendMessage(phrase); // Envoie le message
            presetContainer.style.display = 'none'; // Masque les boutons apr√®s utilisation
        };
        presetContainer.appendChild(button);
    });

    const chatBody = document.getElementById("chatPopupBody");
    // Assurez-vous que le conteneur n'est pas d√©j√† pr√©sent
    if (!document.querySelector('.preset-phrases')) {
        chatBody.appendChild(presetContainer);
    }
}

// R√©initialiser la conversation lors du chargement de la page
window.onload = function() {
    conversationHistory = []; // R√©initialiser l'historique
    const chatBody = document.getElementById("chatPopupBody");
    chatBody.innerHTML = "<p>Bonjour ! Je suis l'assistant virtuel de Joris. Comment puis-je vous aider ?</p>"; // Message initial
    
    // Initialiser l'ann√©e dans le footer
    const yearElement = document.getElementById('currentYear');
    if (yearElement) {
        yearElement.textContent = new Date().getFullYear();
    }
};

// Fermer la fen√™tre de chat si l'utilisateur clique en dehors
document.addEventListener("click", function(event) {
    const popup = document.getElementById("chatPopup");
    const bubble = document.getElementById("chatbotBubble");
    
    // Si ces √©l√©ments n'existent pas, ne rien faire
    if (!popup || !bubble) return;
    
    const presetContainer = document.querySelector('.preset-phrases');

    // V√©rifier si le clic est en dehors de la bulle de chat et de la fen√™tre de chat
    if (popup.style.display === "block" && !popup.contains(event.target) && !bubble.contains(event.target)) {
        popup.style.display = "none"; // Fermer la fen√™tre
        bubble.style.animation = ""; // R√©active l'animation de la bulle
    }
});

// Fonction d'envoi de message
async function sendMessage(userMessage = null) {
    // Utiliser le message utilisateur pass√© ou obtenir le champ de saisie
    const messageInput = document.getElementById("userMessage");
    const messageToSend = userMessage || messageInput.value;
    
    if (!messageToSend || messageToSend.trim() === "") return;

    // Ajouter le message utilisateur dans le chat
    const chatBody = document.getElementById("chatPopupBody");
    chatBody.innerHTML += `<p class="bulle-utilisateur"><strong>Vous:</strong> ${messageToSend}</p>`;
    
    // V√©rifier les doublons avant d'ajouter √† l'historique
    if (!conversationHistory.some(msg => msg.content === messageToSend)) {
        conversationHistory.push({ role: "user", content: messageToSend });
    }

    // Effacer le champ de saisie
    if (messageInput) messageInput.value = "";

    // Cr√©er l'√©l√©ment d'animation de chargement
    var loading = document.createElement("div");
    loading.className = "loading";
    loading.innerHTML = `
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
    `;
    chatBody.appendChild(loading); // Ajouter l'animation au chat

    // Masquer les phrases pr√©fabriqu√©es apr√®s l'envoi du premier message
    const presetContainer = document.querySelector('.preset-phrases');
    if (presetContainer) {
        presetContainer.style.display = 'none';
    }

    // Contexte du chatbot (profil de Joris)
    const context = `
    Tu es mon chatbot assistant, fais-toi passer pour moi √† chaque fois qu'on te pose des questions. Voici mon profil :
    
    Bonjour ! Je suis Joris, 23 ans, Data Analyst passionn√©, actuellement en DU Data Analytics √† la Sorbonne Paris 1 (Top 5) et en Master 2 Data Analytics & Strat√©gie de l'information √† Toulon (Top 3).
    
    üë®‚Äçüíº Exp√©rience professionnelle :
    - üöÄ Micropole (F√©vrier 2025 - Pr√©sent) : Business Intelligence Consultant - Missions Data Exp√©rience (Reporting, mod√©lisation, ETL, Cloud) incluant la migration de reporting Oracle BI vers Power BI pour la R√©gion Ile de France
    - üöÄ ArianeGroup (Mars 2024 - Juillet 2024) : Ing√©nieur BI - D√©finition des besoins, documentation, production de reporting (IBM Cognos Analytics), traitement ETL. Travail en anglais pour am√©liorer la cadence de production d'Ariane 6
    - üí≥ Cr√©dit Agricole La R√©union-Mayotte (Juin 2023 - Juillet 2023) : Data Manager - Migration de donn√©es Power Pivot vers BDD interne, mod√©lisation et mise en place de reporting d√©cisionnel
    - üå¶Ô∏è M√©t√©o-France (Avril 2023 - Juin 2023) : Data Analyst - Recherche sur l'impact du r√©chauffement climatique sur les pr√©cipitations en Bretagne avec tests statistiques avanc√©s sur s√©ries temporelles
    - üèôÔ∏è Les Sables d'Olonne Agglom√©ration (Avril 2022 - Juin 2022) : Data Analyst - Conseils sur solution data pour suivi d'indicateurs territoriaux, BDD on-premise avec ETL et reporting, web scraping
    
    üéì Formation :
    - DU Data Analytics (Sorbonne Paris 1, 2024-2025)
      ‚Üí Analyse statistique, ML/Deep Learning, RAG, Streamlit, Cloud AWS, Power BI, Tableau, Qlik, Talend, BDD on-premise/Cloud
    - Master Data Analytics & Strat√©gie de l'information (Toulon, 2023-2025)
      ‚Üí Conception cha√Ænes de valeur Data, d√©ploiement IA (classification, OCR, pr√©diction), m√©thodes statistiques avanc√©es
    - Licence 3 Math√©matiques et Informatique (Rennes, 2022-2023) 
      ‚Üí Analyse statistique, tests d'hypoth√®se, mod√®les pr√©dictifs, optimisation
    - DUT Statistique Informatique D√©cisionnelle (Vannes, 2020-2022)
      ‚Üí Manipulation donn√©es, analyses R/Python, statistiques avanc√©es, BDD SQL
    J'ai effectu√© 2 m√©moire de fin d'√©tude : 
    - un pour la Sorbonne manipulant le finetuning de LLM pour la simplification des textes de lois qui sont publi√©s quotidiennement au Journal Officiel. Vous pouvez retrouver le projet sur ce portfolio.
    - un autre pour le Master √† Toulon, sur la perception des contenus produits par l'intelligence artifielle. Le but est de savoir si l'usager lambda d√©tecte un contenu g√©n√©rer, et si non, comment il envisage sa relation vis √† vis des contenus dont il ne connait pas la source
    
    üåç Engagement :
    - Vice-Pr√©sident du BDE (Toulon) : coh√©sion √©tudiante, r√©seau ALUMNI, √©v√©nements (ski 50 √©tudiants)
    - Membre √âlu UFR : d√©cisions sur formations, budget et projets
    - √âlu repr√©sentant √©tudiant √† l'IUT de Vannes
    
    üí™ Comp√©tences cl√©s :
    - Data Engineering : SGBD (MySQL, MongoDB), Cloud (AWS, Azure)
    - Data Analytics : ETL (Talend), ingestion donn√©es, SQL, analyses statistiques
    - Data Visualization : Power BI, Tableau, Cognos Analytics, Streamlit, Flask
    - Langages : Python, R, SQL, VBA, JS
    - Data Science : ML/DL, MLFlow, monitoring (Arize), d√©ploiement AWS
    
    üéØ Ambition :
    Faire du conseil autour des solutions digitals, data et IA, en particulier dans le secteur public. Je suis passionn√© par l'impact de la data sur les d√©cisions strat√©giques et la transformation digitale des organisations. Je cherche √† allier mes comp√©tences techniques √† une compr√©hension approfondie des enjeux m√©tiers pour apporter une r√©elle valeur ajout√©e √† mes clients.
    Je suis √©galement tr√®s int√©ress√© par les projets innovants qui utilisent la data pour r√©soudre des probl√®mes complexes et am√©liorer la vie quotidienne des citoyens.
    Je suis convaincu que la data est un levier puissant pour transformer les organisations et je suis d√©termin√© √† contribuer √† cette transformation.

    J'esp√®re pouvoir collaborer dans le futur avec Nolwenn Chapellon, qui a un profil tr√®s compl√©mentaire au mien, et avec qui nous pouvons r√©aliser de beaux projets

    üîó Liens :
    - GitHub : https://github.com/Jorissalmon
    - LinkedIn : https://www.linkedin.com/in/joris-salmon/
    - CV : https://drive.google.com/file/d/1NeNoU_QvoOKOkPdssN59cdVko7NGEH0M/view?usp=sharing
    
    üì© Contact : joris.salmon53290@gmail.com | üì± 0766840946
    
    R√©ponds √† la question suivante : "${messageToSend}"`;

    // Cr√©er le prompt final en ajoutant l'historique des messages
    const messages = [{ role: "system", content: context }];
    conversationHistory.forEach(msg => messages.push(msg));
    messages.push({ role: "user", content: messageToSend });

    try {
        // Appel √† l'API OpenAI existante via votre endpoint Vercel
        const response = await fetch('https://porte-folio-kappa.vercel.app/api/callopenai', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                messages: messages
            })
        });

        if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
        }

        const data = await response.json();
        let messageBot = data.choices[0].message.content;

        // Pour les liens cliquables
        messageBot = messageBot
            .replace('https://github.com/Jorissalmon', '<a href="https://github.com/Jorissalmon" target="_blank" class="styled-link">GitHub</a>')
            .replace('https://www.linkedin.com/in/joris-salmon/', '<a href="https://www.linkedin.com/in/joris-salmon/" target="_blank" class="styled-link">LinkedIn</a>')
            .replace('https://drive.google.com/file/d/1NeNoU_QvoOKOkPdssN59cdVko7NGEH0M/view?usp=sharing', '<a href="https://drive.google.com/file/d/1NeNoU_QvoOKOkPdssN59cdVko7NGEH0M/view?usp=sharing" target="_blank" class="styled-link">CV</a>')
            .replace('joris.salmon53290@gmail.com', '<a href="mailto:joris.salmon53290@gmail.com" class="styled-link">joris.salmon53290@gmail.com</a>')
            .replace('0766840946', '<a href="tel:+33766840946" class="styled-link">0766840946</a>');
        
        // Supprimer l'animation de chargement
        chatBody.removeChild(loading);

        // Cr√©er un nouvel √©l√©ment div pour la bulle de message
        const assistantBubble = document.createElement('div');
        assistantBubble.className = 'bulle-joris';

        // Cr√©er un conteneur flex pour l'image et le texte
        const bubbleContent = document.createElement('div');
        bubbleContent.className = 'bubble-content'; // Classe pour le conteneur flex

        // Cr√©er un √©l√©ment pour l'image
        const avatarImage = document.createElement('img');
        avatarImage.src = 'img/contact.jpg'; // Chemin vers l'image de favicon
        avatarImage.alt = 'Joris';

        // Cr√©er un nouvel √©l√©ment pour le message texte
        const messageElement = document.createElement('p'); 
        messageElement.innerHTML = ''; // Sera rempli par l'effet de typewriter
        bubbleContent.appendChild(messageElement);

        // Ajouter l'image et le contenu dans une div flex
        const contentWrapper = document.createElement('div');
        contentWrapper.className = 'content-wrapper'; // Conteneur pour l'image et le texte
        contentWrapper.appendChild(avatarImage); // Ajouter l'image
        contentWrapper.appendChild(bubbleContent); // Ajouter le texte

        assistantBubble.appendChild(contentWrapper); // Ajouter le wrapper √† la bulle
        chatBody.appendChild(assistantBubble); // Ajouter la bulle au chat

        // Assurez-vous de faire d√©filer vers le bas
        chatBody.scrollTop = chatBody.scrollHeight;

        // Ajouter l'effet de typewriter
        typeWriterEffect(messageElement, messageBot);

        // Ajouter le message √† l'historique
        conversationHistory.push({ role: "assistant", content: messageBot });
    } catch (error) {
        console.error("Erreur chatbot:", error);
        
        // Supprimer l'animation de chargement
        if (loading.parentNode) {
            chatBody.removeChild(loading);
        }
        
        // Afficher un message d'erreur
        chatBody.innerHTML += `
            <div class="bulle-joris">
                <p><strong>Erreur:</strong> Le chatbot a rencontr√© un probl√®me. Veuillez r√©essayer plus tard.</p>
            </div>
        `;
        
        // Scroll vers le bas
        chatBody.scrollTop = chatBody.scrollHeight;
    }
}

// Fonction d'animation de type "mot par mot" qui respecte le HTML
function typeWriterEffect(element, text) {
    let index = 0;
    let currentText = ''; // Stocker le texte actuellement affich√©
    let isInTag = false;  // Indique si on est √† l'int√©rieur d'une balise HTML
    const typingEffect = setInterval(() => {
        if (index < text.length) {
            // V√©rifier si on est √† l'int√©rieur d'une balise HTML
            if (text[index] === '<') {
                isInTag = true;
            }
            if (isInTag) {
                currentText += text[index]; // Accumuler les caract√®res d'une balise
                if (text[index] === '>') {
                    isInTag = false; // Fin de la balise
                }
            } else {
                currentText += text[index]; // Ajouter un caract√®re normal
            }

            // Ajouter tout le texte au fur et √† mesure (balises + contenu)
            element.innerHTML = currentText;
            index++;
            
            // Scroll jusqu'en bas
            const chatBody = document.getElementById("chatPopupBody");
            if (chatBody) chatBody.scrollTop = chatBody.scrollHeight;
        } else {
            clearInterval(typingEffect); // Arr√™ter l'animation quand c'est fini
        }
    }, 5); // Vitesse d'animation, en millisecondes
}