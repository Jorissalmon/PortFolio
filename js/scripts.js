// Initialiser un tableau pour stocker les messages
let conversationHistory = [];


// Si document n'existe pas (Node.js), utiliser JSDOM pour simuler le DOM
if (typeof document === 'undefined') {
    const dom = new JSDOM(`
        <!DOCTYPE html>
        <body>
            <div id="chatbotBubble"></div>
            <div id="chatPopupBody"></div>
            <input id="userMessage" />
            <div id="chatPopup"></div>
        </body>
    `);
    global.document = dom.window.document;
    global.window = dom.window;
}

// Ouvrir/Fermer la fen√™tre de chat
document.getElementById("chatbotBubble").addEventListener("click", function() {
    const popup = document.getElementById("chatPopup");
    popup.style.display = popup.style.display === "block" ? "none" : "block";

    if (popup.style.display === "block") {
        this.style.animation = "none"; // Arr√™te l'animation
        showPresetPhrases();
    } else {
        this.style.animation = ""; // R√©active l'animation si la bulle est ferm√©e
    }
});

// √âcouter l'√©v√©nement "keypress" sur le champ de texte
document.getElementById("userMessage").addEventListener("keypress", function(event) {
    if (event.key === "Enter") {
        event.preventDefault(); // Emp√™cher le comportement par d√©faut
        sendMessage(document.getElementById("userMessage").value); // Appeler la fonction d'envoi de message
    }
});



// Ajoutez les phrases pr√©fabriqu√©es
const presetPhrases = [
    "Bonjour, qui es-tu ?",
    "Quelles sont tes comp√©tences ?",
    "Comment te contacter ?",
    "O√π te retrouver ?"
];

// Fonction pour afficher les phrases pr√©fabriqu√©es
function showPresetPhrases() {
    const presetContainer = document.createElement('div');
    presetContainer.classList.add('preset-phrases');
    
    // Vider le conteneur avant de le remplir
    presetContainer.innerHTML = '';

    presetPhrases.forEach(phrase => {
        const button = document.createElement('button');
        button.innerText = phrase;
        button.onclick = (event) => {
            event.stopPropagation(); // Emp√™che la fermeture du chat
            sendMessage(phrase); // Envoie le message
            presetContainer.style.display = 'none'; // Masque les boutons apr√®s utilisation
        };
        presetContainer.appendChild(button);
    });

    const chatBody = document.getElementById("chatPopupBody");
    // Assurez-vous que le conteneur n'est pas d√©j√† pr√©sent
    if (!document.querySelector('.preset-phrases')) {
        chatBody.appendChild(presetContainer);
    }
}

// R√©initialiser la conversation lors du chargement de la page
window.onload = function() {
    conversationHistory = []; // R√©initialiser l'historique
    const chatBody = document.getElementById("chatPopupBody");
    chatBody.innerHTML = ""; // Effacer le contenu du chat
};

// Fermer la fen√™tre de chat si l'utilisateur clique en dehors
document.addEventListener("click", function(event) {
    const popup = document.getElementById("chatPopup");
    const bubble = document.getElementById("chatbotBubble");
    const presetContainer = document.querySelector('.preset-phrases');

    // V√©rifier si le clic est en dehors de la bulle de chat et de la fen√™tre de chat
    if (popup.style.display === "block" && !popup.contains(event.target) && !bubble.contains(event.target)) {
        popup.style.display = "none"; // Fermer la fen√™tre
        bubble.style.animation = ""; // R√©active l'animation de la bulle
    }
});

// Fonction d'envoi de message
async function sendMessage(userMessage = null) {
    // Utiliser le message utilisateur pass√© ou obtenir le champ de saisie
    const messageToSend = userMessage || document.getElementById("userMessage").value;
    if (messageToSend.trim() === "") return;


    // Ajouter le message utilisateur dans le chat
    const chatBody = document.getElementById("chatPopupBody");
    chatBody.innerHTML += `<p class="bulle-utilisateur"><strong>Vous:</strong> ${messageToSend}</p>`;
    
    // V√©rifier les doublons avant d'ajouter √† l'historique
    if (!conversationHistory.some(msg => msg.content === messageToSend)) {
        conversationHistory.push({ role: "user", content: messageToSend });
    }

    document.getElementById("userMessage").value = ""; // Effacer le champ

    // Cr√©er l'√©l√©ment d'animation de chargement
    var loading = document.createElement("div");
    loading.className = "loading";
    loading.innerHTML = `
        <div class="dot"></div>
        <div class="dot"></div>
        <div class="dot"></div>
    `;
    chatBody.appendChild(loading); // Ajouter l'animation au chat



    // Masquer les phrases pr√©fabriqu√©es apr√®s l'envoi du premier message
    const presetContainer = document.querySelector('.preset-phrases');
    if (presetContainer) {
        presetContainer.style.display = 'none';
    }

    const context = `
    Tu es mon chatbot assistant, fais-toi passer pour moi √† chaque fois qu'on te pose des questions. Voici mon profil :

    Bonjour ! Je suis Joris, j'ai 22 ans, un Data Analyst passionn√© par le monde de la donn√©e, actuellement en DU Data Analytics √† la Sorbonne Paris 1 et en Master 2 √† Toulon.
    
    Mes centres d'int√©r√™ts :
    - Hackathons : Oc√©an Hackathon avec Naval Group et la Marine Nationale.
    - B√©n√©volat : AFEV (accompagnement d‚Äôun enfant) et Pr√©sident du BDE (organisation d‚Äô√©v√©nements).
    - Voyages : La R√©union, Maurice, Canada, Irlande, Espagne, Hongrie, Slovaquie.
    - Sports : Course √† pied, Beach Volley, Natation, Cyclisme.
    
    Formations :
    - Master Data Analytics (Toulon)
    - DU Data Analytics (Sorbonne, Paris 1)
    - Licence 3 Math√©matiques et Informatique (Rennes)
    - DUT Statistique Informatique D√©cisionnelle (Vannes)
    
    Exp√©riences :
    1. ArianeGroup : Ing√©nieur BI, j'ai √©labor√© des rapport BI Cognos, je d√©finissai le besoin avec le client. J'ai √©labor√© des rapports permettant le pilotage des couts du service. De plus, j'ai travaill√© avec la suite Atlassian pour le suivi et la gestion des tickets Atlassian.
    2. Cr√©dit Agricole : Data Manager, j'ai aid√© √† la migration des donn√©es sur une base de donn√©es via un processus automatis√© sur la suite Microsoft notamment via Access. Mon travail a permit d'automatiser la migration et de la faire plus rapidement
    3. M√©t√©o-France : Data Analyst, J'ai travaill√© sur le sujet de recherche, le r√©chauffement climatique a t-il un impact sur les ph√©nom√®nes de fortes pr√©cipitations en Bretagne. J'ai analys√© les donn√©es de 1959 √† nos jours, avec des m√©thodes et tests statistiques avanc√©s. Finalement j'ai trouv√© des r√©sultats sensiblement significatif mais qui m√©ritait de plus amples recherches
    4. Les Sables d'Olonne : Data Analyst, construction d'un algorithme qui r√©cup√®re les donn√©es multi sources, qui va les traitzer et les stocker. Apr√®s cela, il va g√©n√©rer sur demande un rapport statistique sur le territoire. Cela est utili notamment pour suivre les performances du service public.
    
    Mon ambition :
    Aider les entreprises √† devenir data-driven et √† prendre des d√©cisions √©clair√©es. J'aimerais pouvoir aider √† la construction de strat√©gie dans l'utilisation de la data, que ce soit sur le choix de la stack ou le plan d'application. Mes comp√©tences premi√®res sont dans l'analyse data, mais je m'int√©resse aussi aux autres domaines tels que la data science ou le data engineering. J'aimerais donc devenir consultant dans ce domaine et prendre de l'exp√©rience.
    
    Mes comp√©tences cl√©s :
    - Data Engineering : Ma√Ætrise de SGBD comme MySQL, MongoDB, et outils Cloud (AWS, Azure).
    - Data Analyste : Je sais faire des ETL (Talend) et faire de l'ingestion de donn√©es pour alimenter les DWH. Je sais ensuite les requeter en SQL pour les visualiser ensuite sur des outils de data visualization
    - Data Visualization : Cr√©ation de rapports interactifs avec Power BI, Tableau, et Cognos Analytics. Egalement j'ai de l'exp√©rience avec l'interface streamlit,flask.
    - Langages de programmation : Python, R, SQL, VBA, JS.
    -J'ai aussi quelques connaissances en data sciences que ce soit en deep learning ou en Machine Learning. Que ce soit dans la cr√©ation d'algo avec MLFlow, dans leur suivi avec du Monitoring sur Arize ou bien en deploiement sur le cloud comme AWS
    
    La personne que je pr√©f√®re c'est Kath ü•∞ !
    La plus forte et de loin en SEO c'est C√©cilia que tu retrouve √† ceciliaremark.com

    Liens utiles :
    - GitHub : https://github.com/Jorissalmon
    - LinkedIn : https://www.linkedin.com/in/joris-salmon/
    - CV : https://drive.google.com/file/d/1NeNoU_QvoOKOkPdssN59cdVko7NGEH0M/view?usp=sharing

    On peut me contacter par mail √† joris.salmon53290@gmail.com ou par t√©l√©phone au 0766840946

    Instructions de Mise en Forme
    Sois synth√©tique et direct et bref : Allez √† l'essentiel sans d√©tours.
    am√©liore la lisibilit√© et ajoute des √©mojis pertinents pour rendre la r√©ponse engageante, tout en restant professionnel.

    R√©ponds √† la question suivante : "${messageToSend}"`
    ;


     // Cr√©er le prompt final en ajoutant l'historique des messages
     const messages = [{ role: "system", content: context }];
     conversationHistory.forEach(msg => messages.push(msg));
     messages.push({ role: "user", content: messageToSend });


     // Appel √† l'API OpenAI pour obtenir une r√©ponse
     try {
        const response = await fetch('https://porte-folio-kappa.vercel.app/api/callopenai', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                messages: messages
            })
        });
        const data = await response.json();
        let messageBot = data.choices[0].message.content;

        // Pour les liens cliquables
        messageBot = messageBot
        .replace('https://github.com/Jorissalmon', '<a href="https://github.com/Jorissalmon" target="_blank" class="styled-link">GitHub</a>')
        .replace('https://www.linkedin.com/in/joris-salmon/', '<a href="https://www.linkedin.com/in/joris-salmon/" target="_blank" class="styled-link">LinkedIn</a>')
        .replace('https://drive.google.com/file/d/1NeNoU_QvoOKOkPdssN59cdVko7NGEH0M/view?usp=sharing', '<a href="https://drive.google.com/file/d/1NeNoU_QvoOKOkPdssN59cdVko7NGEH0M/view?usp=sharing" target="_blank" class="styled-link">CV</a>')
        .replace('joris.salmon53290@gmail.com', '<a href="mailto:joris.salmon53290@gmail.com" class="styled-link">joris.salmon53290@gmail.com</a>')
        .replace('0766840946', '<a href="tel:+33766840946" class="styled-link">0766840946</a>');
        
        // Supprimer l'animation de chargement
        chatBody.removeChild(loading);

        // Ajouter le message de l'assistant avec effet de fondu
        const assistantBubble = document.createElement('p');
        assistantBubble.className = 'bulle-joris';
        assistantBubble.innerHTML = `
        <img src="../meta/favicon.ico" class="favicon-icon" alt="favicon">
        `;

        chatBody.appendChild(assistantBubble);
        assistantBubble.classList.add('fade-in'); // Ajouter classe d'animation

        // Assurez-vous de faire d√©filer vers le bas
        chatBody.scrollTop = chatBody.scrollHeight;

        // Ajouter l'effet de typewriter
        typeWriterEffect(assistantBubble, messageBot);

        // Ajouter le message √† l'historique
        conversationHistory.push({ role: "assistant", content: messageBot });
    } catch (error) {
        chatBody.innerHTML += "<p><strong>Erreur:</strong> Le chatbot a connu une erreur.</p>";
        // Supprimer l'animation de chargement
        chatBody.removeChild(loading);
    }
}

 
// Fonction d'animation de type "mot par mot" qui respecte le HTML
function typeWriterEffect(element, text) {
    let index = 0;
    let currentText = ''; // Stocker le texte actuellement affich√©
    let isInTag = false;  // Indique si on est √† l'int√©rieur d'une balise HTML
    const typingEffect = setInterval(() => {
        if (index < text.length) {
            // V√©rifier si on est √† l'int√©rieur d'une balise HTML
            if (text[index] === '<') {
                isInTag = true;
            }
            if (isInTag) {
                currentText += text[index]; // Accumuler les caract√®res d'une balise
                if (text[index] === '>') {
                    isInTag = false; // Fin de la balise
                }
            } else {
                currentText += text[index]; // Ajouter un caract√®re normal
            }

            // Ajouter tout le texte au fur et √† mesure (balises + contenu)
            element.innerHTML = currentText;
            index++;
            element.scrollTop = element.scrollHeight; // Scroll jusqu'en bas
        } else {
            clearInterval(typingEffect); // Arr√™ter l'animation quand c'est fini
        }
    }, 10); // Vitesse d'animation, en millisecondes
}
